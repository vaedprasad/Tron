Welcome to the Tron Tutorials! In this short series, we'll build three progressively more advanced Tron Bots: A basic bot, a wall-hugging mid bot, and an advanced Voronoi minimax bot.
Basic Bot
Tutorial
Our first bot will be the basic bot. Its strategy is very simple: it will find where it is on the map, look at the squares around it on the map, and then move to an empty square in the order of preference of N, E, S, W. The first thing we'll need to do for this bot is to find out where we are. To do so, we can simply iterate through the entire two-dimensional array that we're given and check whether the square matches the value of our player:
`code`
std::pair myLocation;
for(int y = 0; y < 16; y++)  {
	for(int x = 0; x < 16; x++) {
		if(m[y][x] == ME) {
			myLocation = { x, y };
		}
	}
}
`code`
Next, we need to find out what directions are safe for us to go in. To do this, we can create a boolean array with four elements in it, one for each direction, and check two things.

We need to confirm that the square we are checking actually exists. If it doesn't, our bot will fail because it will try to check the value of a square which doesn't exist, which will make it crash.

We need to check that the square is empty.

If both of the above are true, then we will deem the square safe and put the value as true. Otherwise, we will set it to be false, or not safe.

bool safe[4];
safe[NORTH] = myLocation.second != 15 && m[myLocation.second + 1][myLocation.first] == EMPTY;
safe[EAST] = myLocation.first != 15 && m[myLocation.second][myLocation.first + 1] == EMPTY;
safe[SOUTH] = myLocation.second != 0 && m[myLocation.second - 1][myLocation.first] == EMPTY;
safe[WEST] = myLocation.first != 0 && m[myLocation.second][myLocation.first - 1] == EMPTY;
Next, we can do a bit of output to make debugging easier for later, as once you modify it something is bound to break. We'll log our location and whether each individual direction is safe. To make this easier, we can also write a little function which will tell us what direction a given integer corresponds to. 0 corresponds to NORTH, 1 to EAST, 2 to SOUTH, and 3 to WEST.

dbg::logln("-----------------------------------------------------\nDebug for turn #" + std::to_string(turnNumber) + ':');
for(int a = 0; a < 4; a++) dbg::logln("Direction " + std::to_string(a) + " is " + (safe[a] ? "safe." : "not safe."));
Finally, we need to find the first direction in the order NORTH, EAST, SOUTH, WEST which is safe to go in, and to move in that direction.

bool * safeLoc = std::find(safe, safe + 4, true);
if(safeLoc != safe + 4) {
	sendMove(safeLoc - safe);
}
else {
	sendMove(NORTH);
}
Full Code
Here is the full source of the basic tron bot:

#include "Tron.h"
#include <algorithm>
#include <set>
std::ofstream debug;

//Little useful function for debugging, as it will tell us what direction, in words, an integer corresponds to.
inline std::string stringFromDirection(int dir) {
	return dir == 0 ? "NORTH" : dir == 1 ? "EAST" : dir == 2 ? "SOUTH" : dir == 3 ? "WEST" : "NONSENSE";
}

int main() {
	//Seed rand with the time.
	srand(time(NULL));

	//Initialize bot with respect to the Tron Environment.
	init();

	//We'll want to keep track of the turn number to make debugging easier.
	int turnNumber = 0;

	//Execute loop forever (or until game ends)
	while(true) {
		//Update turn number:
		turnNumber++;

		//Gets the newest map. Every int will have a value of EMPTY, ME, OPPONENT, TAKEN_BY_ME, or TAKEN_BY_OPPONENT.
		std::vector< std::vector<int> > m = getMap();

		//Let's figure out where we are:
		std::pair<int, int> myLocation;
		for(int y = 0; y < 16; y++)  {
			for(int x = 0; x < 16; x++) {
				if(m[y][x] == ME) {
					myLocation = { x, y };
				}
			}
		}

		//Let's find out which directions are safe to go in:
		bool safe[4];
		safe[NORTH] = myLocation.second != 15 && m[myLocation.second + 1][myLocation.first] == EMPTY;
		safe[EAST] = myLocation.first != 15 && m[myLocation.second][myLocation.first + 1] == EMPTY;
		safe[SOUTH] = myLocation.second != 0 && m[myLocation.second - 1][myLocation.first] == EMPTY;
		safe[WEST] = myLocation.first != 0 && m[myLocation.second][myLocation.first - 1] == EMPTY;

		dbg::logln("-----------------------------------------------------\nDebug for turn #" + std::to_string(turnNumber) + ':');
		for(int a = 0; a < 4; a++) dbg::logln("Direction " + std::to_string(a) + " is " + (safe[a] ? "safe." : "not safe."));

		/*Let's see if there's a safe direction to go in.
		If so, we'll go that way, preferentially North, East, South, and then West.
		If not, we'll just go North.*/
		bool * safeLoc = std::find(safe, safe + 4, true);
		if(safeLoc != safe + 4) {
			sendMove(safeLoc - safe);
		}
		else {
			sendMove(NORTH);
		}
	}
}
Wall Hugging
Tutorial
The strategy behind wall-hugging is to choose the direction to move which is empty but also has the most adjacent walls. If there's a tie, it'll choose the direction that comes first in the order of N, E, S, W

First, we can write a simple function to determine the location reached when travelling from a square in a given direction. If the location doesn't exist, we can write the location { -1, -1 } to indicate that the location does not exist.

//This is something to return if the square we want to return doesn't exist, and correspondingly something to compare against.
#define BAD_LOCATION std::pair<int, int>{ -1, -1 }

//This will give us the square we'd get to if we tried to move in direction dir from location.
inline std::pair<int, int> getLocation(const std::pair<int, int> & location, int dir) {
	if(dir == NORTH) return location.second == 15 ? BAD_LOCATION : std::pair<int, int>{ location.first, location.second + 1 };
	if(dir == EAST) return location.first == 15 ? BAD_LOCATION : std::pair<int, int>{ location.first + 1, location.second };
	if(dir == SOUTH) return location.second == 0 ? BAD_LOCATION : std::pair<int, int>{ location.first, location.second - 1 };
	if(dir == WEST) return location.first == 0 ? BAD_LOCATION : std::pair<int, int>{ location.first - 1, location.second };
	throw std::runtime_error("No such direction exists.");
}
The second thing we can do is to modularize the basic bot's algorithm to find the free squares around a given location, given a map as well. It will return an array of 4 booleans, corresponding to whether an empty square is present in the N, E, S, W locations of the given square.

inline bool * emptyAdjacentSquares(const std::vector< std::vector > & map, const std::pair<int, int> & location) {
	bool * empty = new bool[4];
	empty[NORTH] = location.second != 15 && map[location.second + 1][location.first] == EMPTY;
	empty[EAST] = location.first != 15 && map[location.second][location.first + 1] == EMPTY;
	empty[SOUTH] = location.second != 0 && map[location.second - 1][location.first] == EMPTY;
	empty[WEST] = location.first != 0 && map[location.second][location.first - 1] == EMPTY;
	return empty;
}
Next, we can again find the empty locations around our player, simply by passing in our location to the above function.

bool * safe = emptyAdjacentSquares(m, myLocation);
Then, we can create an array of 4 ints corresponding to the number of empty squares around each of the squares in the directions of N, E, S, W. If the square in the direction we examine is not empty, we will assign it to have five empty squares around it to ensure that we do not go there. Otherwise, we will simply count the number of cases of “true” when we call the function to get the empty adjacent squares and set that to the corresponding spot in the array.

int dirEmptyCount[4];
for(int a = 0; a < 4; a++) if(safe[a]) {
	//Get the location we would be in if we went in a certain direction (specified by a).
	std::pair<int, int> possibleSquare = getLocation(myLocation, a);
	//Make sure that square exists:
	if(possibleSquare != BAD_LOCATION) {
		//Find the squares around that square:
		bool * around = emptyAdjacentSquares(m, possibleSquare);
		//Count the number of empty squares around that square and set it in our array:
		dirEmptyCount[a] = std::count(around, around + 4, true);
		//Cleanup:
		delete[] around;
	}
}
else dirEmptyCount[a] = 5;
Finally, we can find the direction with the smallest value in the above array and move that way.

sendMove(std::min_element(dirEmptyCount, dirEmptyCount + 4) - dirEmptyCount);
Full Code
Here is the full source of the wall-hugging bot:

#include "Tron.h"
#include <algorithm>
#include <set>
std::ofstream debug;

//Note: I define Standard Directional Order (which I'll call standard order) to be: NORTH, EAST, SOUTH, WEST.

//Little useful function for debugging, as it will tell us what direction, in words, an integer corresponds to.
inline std::string stringFromDirection(int dir) {
	return dir == 0 ? "NORTH" : dir == 1 ? "EAST" : dir == 2 ? "SOUTH" : dir == 3 ? "WEST" : "NONSENSE";
}

/*This function finds out which squares Bot3 to location are empty.
It returns in the standard order of NORTH, EAST, SOUTH, and WEST as booleans which are true if the square is empty.
Note that this function DOES create dynamic memory. Make sure to delete it when you're done.*/
inline bool * emptyAdjacentSquares(const std::vector< std::vector<int> > & map, const std::pair<int, int> & location) {
	bool * empty = new bool[4];
	empty[NORTH] = location.second != 15 && map[location.second + 1][location.first] == EMPTY;
	empty[EAST] = location.first != 15 && map[location.second][location.first + 1] == EMPTY;
	empty[SOUTH] = location.second != 0 && map[location.second - 1][location.first] == EMPTY;
	empty[WEST] = location.first != 0 && map[location.second][location.first - 1] == EMPTY;
	return empty;
}

//This is something to return if the square we want to return doesn't exist, and correspondingly something to compare against.
#define BAD_LOCATION std::pair<int, int>{ -1, -1 }

//This will give us the square we'd get to if we tried to move in direction dir from location.
inline std::pair<int, int> getLocation(const std::pair<int, int> & location, int dir) {
	if(dir == NORTH) return location.second == 15 ? BAD_LOCATION : std::pair<int, int>{ location.first, location.second + 1 };
	if(dir == EAST) return location.first == 15 ? BAD_LOCATION : std::pair<int, int>{ location.first + 1, location.second };
	if(dir == SOUTH) return location.second == 0 ? BAD_LOCATION : std::pair<int, int>{ location.first, location.second - 1 };
	if(dir == WEST) return location.first == 0 ? BAD_LOCATION : std::pair<int, int>{ location.first - 1, location.second };
	throw std::runtime_error("No such direction exists.");
}

int main() {
	//Seed rand with the time.
	srand(time(NULL));

	//Initialize bot with respect to the Tron Environment.
	init();

	//We'll want to keep track of the turn number to make debugging easier.
	int turnNumber = 0;

	//Execute loop forever (or until game ends)
	while(true) {
		//Update turn number:
		turnNumber++;

		//Gets the newest map. Every int will have a value of EMPTY, ME, OPPONENT, TAKEN_BY_ME, or TAKEN_BY_OPPONENT.
		std::vector< std::vector<int> > m = getMap();

		//Let's figure out where we are:
		std::pair<int, int> myLocation;
		for(int y = 0; y < 16; y++)  {
			for(int x = 0; x < 16; x++) {
				if(m[y][x] == ME) {
					myLocation = { x, y };
				}
			}
		}

		//Let's find out which directions are safe to go in:
		bool * safe = emptyAdjacentSquares(m, myLocation);

		//Let's look at the counts of empty squares around the possible squares to go to:
		int dirEmptyCount[4];
		for(int a = 0; a < 4; a++) if(safe[a]) {
			//Get the location we would be in if we went in a certain direction (specified by a).
			std::pair<int, int> possibleSquare = getLocation(myLocation, a);
			//Make sure that square exists:
			if(possibleSquare != BAD_LOCATION) {
				//Find the squares around that square:
				bool * around = emptyAdjacentSquares(m, possibleSquare);
				//Count the number of empty squares around that square and set it in our array:
				dirEmptyCount[a] = std::count(around, around + 4, true);
				//Cleanup:
				delete[] around;
			}
		}
		else dirEmptyCount[a] = 5; //Irrelevant, but we must ensure it's as large as possible because we don't want to go there.

		dbg::logln("-----------------------------------------------------\nDebug for turn #" + std::to_string(turnNumber) + ':');
		for(int a = 0; a < 4; a++) dbg::logln("Direction " + std::to_string(a) + " is " + (safe[a] ? "safe " : "not safe ") + "and has " + std::to_string(dirEmptyCount[a]) + " Bot3 empty squares.");

		//We'll go in the direction that has the most walls Bot3 to it and is free to go to. If there's a tie we use standard order.
		sendMove(std::min_element(dirEmptyCount, dirEmptyCount + 4) - dirEmptyCount);

		delete[] safe; //Cleanup
	}
}
Minimax
Tutorial
The minimax bot is the most advanced bot we'll implement in this tutorial series. It will simulate all sixteen possible moves (4 for us and 4 for them) one turn into the future, simulate the results, and rank the resulting game positions. The system that it uses to do rankings is called the Voronoi system after Voronoi diagrams; it takes the number of pieces we can reach before our opponent can, subtracts the number of pieces our opponent can reach before we can, and makes that the value of the position. Finally, once the moves have been simulated, it will move in the direction such that, no matter what move our opponent makes, the value of the position is as large as possible.

There are two important functions we'll need to write before we can make this work. The first one will be to simulate a move. It will take a map, my move, their move, and output the resulting map. If a player wins with that set of moves, it will throw an enum which is defined as:

enum Result {
	OUR_VICTORY,
	THEIR_VICTORY,
	BOTH_DEATH
};
The function which does the simulation looks like:

std::vector< std::vector<int> > simulateMove(std::vector< std::vector<int> > map, int myMove, int opMove) {
	//Let's figure out where we and our opponent are:
	std::pair<int, int> myLocation, opLocation;
	for(int y = 0; y < 16; y++)  {
		for(int x = 0; x < 16; x++) {
			if(map[y][x] == ME) {
				myLocation = { x, y };
			}
			if(map[y][x] == OPPONENT) {
				opLocation = { x, y };
			}
		}
	}

	map[myLocation.second][myLocation.first] = TAKEN_BY_ME;
	map[opLocation.second][opLocation.first] = TAKEN_BY_OPPONENT;

	auto newMyLocation = getLocation(myLocation, myMove), newOpLocation = getLocation(opLocation, opMove);
	if(newMyLocation == newOpLocation) throw BOTH_DEATH;
	if(newMyLocation == BAD_LOCATION || map[newMyLocation.second][newMyLocation.first] != EMPTY) {
		throw newOpLocation == BAD_LOCATION || map[newOpLocation.second][newOpLocation.first] != EMPTY ? BOTH_DEATH : THEIR_VICTORY;
	}
	if(newOpLocation == BAD_LOCATION || map[newOpLocation.second][newOpLocation.first] != EMPTY) throw OUR_VICTORY;

	map[newMyLocation.second][newMyLocation.first] = ME;
	map[newOpLocation.second][newOpLocation.first] = OPPONENT;

	return map;
}

The second function we'll need efficiently finds the voronoi value of a position. To do this, it conducts a specialized breadth-first search to find how far away pieces are from us. Here's a visualization of a breadth-first search similar to what we'll use:

http://joseph-harrington.com/2012/02/breadth-first-search-visual/
To do this, we maintain a front of the pieces we're examining, and we also maintain a new front - the pieces that we're assembling for the next front. We can then seed our search with a location, namely our location or our opponent's, and then run the search to find out how many moves are required to reach a location.

int voronoiCount(const std::vector< std::vector<int> > & map) {

	//Let's figure out where we and our opponent are:
	std::pair<int, int> myLocation, opLocation;
	for(int y = 0; y < 16; y++)  {
		for(int x = 0; x < 16; x++) {
			if(map[y][x] == ME) {
				myLocation = { x, y };
			}
			if(map[y][x] == OPPONENT) {
				opLocation = { x, y };
			}
		}
	}

	/*Initialize distanceFromMe, which stores how far squares are from me.
	Furthermore, it can also tell me whether a square has been visited by the BFS.*/
	int distanceFromMe[16][16];
	for(int a = 0; a < 16; a++) for(int b = 0; b < 16; b++) distanceFromMe[a][b] = 0;

	//Initialize myFront to have only my location in it.
	std::set< std::pair<int, int> > myFront;
	myFront.insert(myLocation);

	//Conduct BFS. Rather than going line by line, I'm going to explain it all here in the hopes that it's more cohesive.
	for(unsigned char dist = 1; myFront.size() != 0; dist++) {
		std::set< std::pair<int, int> > newFront;
		for(auto a = myFront.begin(); a != myFront.end(); a++) {
			auto n = getLocation(*a, NORTH), e = getLocation(*a, EAST), s = getLocation(*a, SOUTH), w = getLocation(*a, WEST);
			if(n != BAD_LOCATION && distanceFromMe[n.second][n.first] == 0 && map[n.second][n.first] == EMPTY) {
				newFront.insert(n);
				distanceFromMe[n.second][n.first] = dist;
			}
			if(e != BAD_LOCATION && distanceFromMe[e.second][e.first] == 0 && map[e.second][e.first] == EMPTY) {
				newFront.insert(e);
				distanceFromMe[e.second][e.first] = dist;
			}
			if(s != BAD_LOCATION && distanceFromMe[s.second][s.first] == 0 && map[s.second][s.first] == EMPTY) {
				newFront.insert(s);
				distanceFromMe[s.second][s.first] = dist;
			}
			if(w != BAD_LOCATION && distanceFromMe[w.second][w.first] == 0 && map[w.second][w.first] == EMPTY) {
				newFront.insert(w);
				distanceFromMe[w.second][w.first] = dist;
			}
		}
		myFront.clear();
		for(auto a = newFront.begin(); a != newFront.end(); a++) myFront.insert(*a);
	}

	/*Initialize distanceFromOp, which stores how far squares are from me.
	Furthermore, it can also tell me whether a square has been visited by the BFS.*/
	int distanceFromOp[16][16];
	for(int a = 0; a < 16; a++) for(int b = 0; b < 16; b++) distanceFromOp[a][b] = 0;

	//Initialize opFront to have only their location in it.
	std::set< std::pair<int, int> > opFront;
	opFront.insert(opLocation);

	//Conduct BFS. Rather than going line by line, I'm going to explain it all here in the hopes that it's more cohesive.
	for(unsigned char dist = 1; opFront.size() != 0; dist++) {
		std::set< std::pair<int, int> > newFront;
		for(auto a = opFront.begin(); a != opFront.end(); a++) {
			auto n = getLocation(*a, NORTH), e = getLocation(*a, EAST), s = getLocation(*a, SOUTH), w = getLocation(*a, WEST);
			if(n != BAD_LOCATION && distanceFromOp[n.second][n.first] == 0 && map[n.second][n.first] == EMPTY) {
				newFront.insert(n);
				distanceFromOp[n.second][n.first] = dist;
			}
			if(e != BAD_LOCATION && distanceFromOp[e.second][e.first] == 0 && map[e.second][e.first] == EMPTY) {
				newFront.insert(e);
				distanceFromOp[e.second][e.first] = dist;
			}
			if(s != BAD_LOCATION && distanceFromOp[s.second][s.first] == 0 && map[s.second][s.first] == EMPTY) {
				newFront.insert(s);
				distanceFromOp[s.second][s.first] = dist;
			}
			if(w != BAD_LOCATION && distanceFromOp[w.second][w.first] == 0 && map[w.second][w.first] == EMPTY) {
				newFront.insert(w);
				distanceFromOp[w.second][w.first] = dist;
			}
		}
		opFront.clear();
		for(auto a = newFront.begin(); a != newFront.end(); a++) opFront.insert(*a);
	}

	/*Finally, let's go through the board and tally up which squares are closer to whom, and then use that to evaluate the position.
	Bear in mind that a value of 0 here actually means that the square is unreachable.
	We'll let the score be equal to the number of squares that are closer to us minus the number closer to them.*/
	int total = 0;
	for(int a = 0; a < 16; a++) for(int b = 0; b < 16; b++) {
		if(distanceFromMe[a][b] == distanceFromOp[a][b]) continue;
		if(distanceFromOp[a][b] == 0 || (distanceFromMe[a][b] < distanceFromOp[a][b] && distanceFromMe[a][b] != 0)) {
			total++;
		}
		else total--;
	}
	return total;
}
Finally, we can now evaluate moves. We'll create a two dimensional, 4 by 4 array of values, and iterate through it and then simulate moves. If we win in the simulation, we'll assign it a value of 257, which is larger than any possible value on a 16 by 16 map; if we lose we'll call it -257. If it's a tie we'll let it be zero, and else we'll use our Voronoi evaluation to determine the value. In the array, the first, outer array represents our moves and the second, inner array represents their moves. So, to conduct our minimax search, all we must do is to first find the minimum of every individual inner array and put it into its own array, and then move in the direction corresponding to the largest value in that array.

for(int a = 0; a < 4; a++) {
	for(int b = 0; b < 4; b++) {
		try {
			results[a][b] = voronoiCount(simulateMove(m, a, b));
		}
		catch(Result r) {
			results[a][b] = r == BOTH_DEATH ? 0 : r == THEIR_VICTORY ? -257 : 257;
		}
	}
}
int miniResults[4];
for(int a = 0; a < 4; a++) {
	miniResults[a] = *std::min_element(results[a], results[a] + 4);
}
There's also some additional output done with the debugger which allows us to time how long our bot takes to move to better improve our bot.

clock_t startTime = clock();
double elapsedTime = 1000 * double(clock() - startTime) / CLOCKS_PER_SEC;

dbg::logln("-----------------------------------------------------\nDebug for turn #" + std::to_string(turnNumber) + ':');
dbg::logln("Minimax evaluation time took " + std::to_string(elapsedTime) + " milliseconds.");
for(int a = 0; a < 4; a++) {
	for(int b = 0; b < 4; b++) {
		dbg::logln("If I move " + stringFromDirection(a) + ", and they move " + stringFromDirection(b) + ", my resulting value will be " + std::to_string(results[a][b]));
	}
}
Full Code
Here is the full code for our minimax bot:

#include "Tron.h"
#include <algorithm>
#include <set>
#include <map>
std::ofstream debug;

//Note: I define Standard Directional Order (which I'll call standard order) to be: NORTH, EAST, SOUTH, WEST.

//Little useful function for debugging, as it will tell us what direction, in words, an integer corresponds to.
inline std::string stringFromDirection(int dir) {
	return dir == 0 ? "NORTH" : dir == 1 ? "EAST" : dir == 2 ? "SOUTH" : dir == 3 ? "WEST" : "NONSENSE";
}

/*This function finds out which squares adjacent to location are empty.
It returns in the standard order of NORTH, EAST, SOUTH, and WEST as booleans which are true if the square is empty.
Note that this function DOES create dynamic memory. Make sure to delete it when you're done.*/
inline bool * emptyAjacentSquares(const std::vector< std::vector<int> > & map, const std::pair<int, int> & location) {
	bool * empty = new bool[4];
	empty[NORTH] = location.second != 15 && map[location.second + 1][location.first] == EMPTY;
	empty[EAST] = location.first != 15 && map[location.second][location.first + 1] == EMPTY;
	empty[SOUTH] = location.second != 0 && map[location.second - 1][location.first] == EMPTY;
	empty[WEST] = location.first != 0 && map[location.second][location.first - 1] == EMPTY;
	return empty;
}

//This is something to return if the square we want to return doesn't exist, and correspondingly something to compare against.
#define BAD_LOCATION std::pair<int, int>{ -1, -1 }

//This will give us the square we'd get to if we tried to move in direction dir from location.
inline std::pair<int, int> getLocation(const std::pair<int, int> & location, int dir) {
	if(dir == NORTH) return location.second == 15 ? BAD_LOCATION : std::pair<int, int>{ location.first, location.second + 1 };
	if(dir == EAST) return location.first == 15 ? BAD_LOCATION : std::pair<int, int>{ location.first + 1, location.second };
	if(dir == SOUTH) return location.second == 0 ? BAD_LOCATION : std::pair<int, int>{ location.first, location.second - 1 };
	if(dir == WEST) return location.first == 0 ? BAD_LOCATION : std::pair<int, int>{ location.first - 1, location.second };
	throw std::runtime_error("No such direction exists.");
}

//This is an enum which will tell us if somebody has run:
enum Result {
	OUR_VICTORY,
	THEIR_VICTORY,
	BOTH_DEATH
};

std::vector< std::vector<int> > simulateMove(std::vector< std::vector<int> > map, int myMove, int opMove) {
	//Let's figure out where we and our opponent are:
	std::pair<int, int> myLocation, opLocation;
	for(int y = 0; y < 16; y++)  {
		for(int x = 0; x < 16; x++) {
			if(map[y][x] == ME) {
				myLocation = { x, y };
			}
			if(map[y][x] == OPPONENT) {
				opLocation = { x, y };
			}
		}
	}

	map[myLocation.second][myLocation.first] = TAKEN_BY_ME;
	map[opLocation.second][opLocation.first] = TAKEN_BY_OPPONENT;

	auto newMyLocation = getLocation(myLocation, myMove), newOpLocation = getLocation(opLocation, opMove);
	if(newMyLocation == newOpLocation) throw BOTH_DEATH;
	if(newMyLocation == BAD_LOCATION || map[newMyLocation.second][newMyLocation.first] != EMPTY) {
		throw newOpLocation == BAD_LOCATION || map[newOpLocation.second][newOpLocation.first] != EMPTY ? BOTH_DEATH : THEIR_VICTORY;
	}
	if(newOpLocation == BAD_LOCATION || map[newOpLocation.second][newOpLocation.first] != EMPTY) throw OUR_VICTORY;

	map[newMyLocation.second][newMyLocation.first] = ME;
	map[newOpLocation.second][newOpLocation.first] = OPPONENT;

	return map;
}

int voronoiCount(const std::vector< std::vector<int> > & map) {

	//Let's figure out where we and our opponent are:
	std::pair<int, int> myLocation, opLocation;
	for(int y = 0; y < 16; y++)  {
		for(int x = 0; x < 16; x++) {
			if(map[y][x] == ME) {
				myLocation = { x, y };
			}
			if(map[y][x] == OPPONENT) {
				opLocation = { x, y };
			}
		}
	}

	/*Initialize distanceFromMe, which stores how far squares are from me.
	Furthermore, it can also tell me whether a square has been visited by the BFS.*/
	int distanceFromMe[16][16];
	for(int a = 0; a < 16; a++) for(int b = 0; b < 16; b++) distanceFromMe[a][b] = 0;

	//Initialize myFront to have only my location in it.
	std::set< std::pair<int, int> > myFront;
	myFront.insert(myLocation);

	//Conduct BFS. Rather than going line by line, I'm going to explain it all here in the hopes that it's more cohesive.
	for(unsigned char dist = 1; myFront.size() != 0; dist++) {
		std::set< std::pair<int, int> > newFront;
		for(auto a = myFront.begin(); a != myFront.end(); a++) {
			auto n = getLocation(*a, NORTH), e = getLocation(*a, EAST), s = getLocation(*a, SOUTH), w = getLocation(*a, WEST);
			if(n != BAD_LOCATION && distanceFromMe[n.second][n.first] == 0 && map[n.second][n.first] == EMPTY) {
				newFront.insert(n);
				distanceFromMe[n.second][n.first] = dist;
			}
			if(e != BAD_LOCATION && distanceFromMe[e.second][e.first] == 0 && map[e.second][e.first] == EMPTY) {
				newFront.insert(e);
				distanceFromMe[e.second][e.first] = dist;
			}
			if(s != BAD_LOCATION && distanceFromMe[s.second][s.first] == 0 && map[s.second][s.first] == EMPTY) {
				newFront.insert(s);
				distanceFromMe[s.second][s.first] = dist;
			}
			if(w != BAD_LOCATION && distanceFromMe[w.second][w.first] == 0 && map[w.second][w.first] == EMPTY) {
				newFront.insert(w);
				distanceFromMe[w.second][w.first] = dist;
			}
		}
		myFront.clear();
		for(auto a = newFront.begin(); a != newFront.end(); a++) myFront.insert(*a);
	}

	/*Initialize distanceFromOp, which stores how far squares are from me.
	Furthermore, it can also tell me whether a square has been visited by the BFS.*/
	int distanceFromOp[16][16];
	for(int a = 0; a < 16; a++) for(int b = 0; b < 16; b++) distanceFromOp[a][b] = 0;

	//Initialize opFront to have only their location in it.
	std::set< std::pair<int, int> > opFront;
	opFront.insert(opLocation);

	//Conduct BFS. Rather than going line by line, I'm going to explain it all here in the hopes that it's more cohesive.
	for(unsigned char dist = 1; opFront.size() != 0; dist++) {
		std::set< std::pair<int, int> > newFront;
		for(auto a = opFront.begin(); a != opFront.end(); a++) {
			auto n = getLocation(*a, NORTH), e = getLocation(*a, EAST), s = getLocation(*a, SOUTH), w = getLocation(*a, WEST);
			if(n != BAD_LOCATION && distanceFromOp[n.second][n.first] == 0 && map[n.second][n.first] == EMPTY) {
				newFront.insert(n);
				distanceFromOp[n.second][n.first] = dist;
			}
			if(e != BAD_LOCATION && distanceFromOp[e.second][e.first] == 0 && map[e.second][e.first] == EMPTY) {
				newFront.insert(e);
				distanceFromOp[e.second][e.first] = dist;
			}
			if(s != BAD_LOCATION && distanceFromOp[s.second][s.first] == 0 && map[s.second][s.first] == EMPTY) {
				newFront.insert(s);
				distanceFromOp[s.second][s.first] = dist;
			}
			if(w != BAD_LOCATION && distanceFromOp[w.second][w.first] == 0 && map[w.second][w.first] == EMPTY) {
				newFront.insert(w);
				distanceFromOp[w.second][w.first] = dist;
			}
		}
		opFront.clear();
		for(auto a = newFront.begin(); a != newFront.end(); a++) opFront.insert(*a);
	}

	/*Finally, let's go through the board and tally up which squares are closer to whom, and then use that to evaluate the position.
	Bear in mind that a value of 0 here actually means that the square is unreachable.
	We'll let the score be equal to the number of squares that are closer to us minus the number closer to them.*/
	int total = 0;
	for(int a = 0; a < 16; a++) for(int b = 0; b < 16; b++) {
		if(distanceFromMe[a][b] == distanceFromOp[a][b]) continue;
		if(distanceFromOp[a][b] == 0 || (distanceFromMe[a][b] < distanceFromOp[a][b] && distanceFromMe[a][b] != 0)) {
			total++;
		}
		else total--;
	}
	return total;
}

int main() {
	//Seed rand with the time.
	srand(time(NULL));

	//Initialize bot with respect to the Tron Environment.
	init();

	//We'll want to keep track of the turn number to make debugging easier.
	int turnNumber = 0;

	//Execute loop forever (or until game ends)
	while(true) {
		//Update turn number:
		turnNumber++;

		//Gets the newest map. Every int will have a value of EMPTY, ME, OPPONENT, TAKEN_BY_ME, or TAKEN_BY_OPPONENT.
		std::vector< std::vector<int> > m = getMap();

		//Let's figure out where we are:
		std::pair<int, int> myLocation;
		for(int y = 0; y < 16; y++)  {
			for(int x = 0; x < 16; x++) {
				if(m[y][x] == ME) {
					myLocation = { x, y };
				}
			}
		}

		clock_t startTime = clock();
		//Conduct 1-layer minimax search evaluations:
		int results[4][4];
		for(int a = 0; a < 4; a++) {
			for(int b = 0; b < 4; b++) {
				try {
					results[a][b] = voronoiCount(simulateMove(m, a, b));
				}
				catch(Result r) {
					results[a][b] = r == BOTH_DEATH ? 0 : r == THEIR_VICTORY ? -257 : 257;
				}
			}
		}
		double elapsedTime = 1000 * double(clock() - startTime) / CLOCKS_PER_SEC;

		dbg::logln("-----------------------------------------------------\nDebug for turn #" + std::to_string(turnNumber) + ':');
		dbg::logln("Minimax evaluation time took " + std::to_string(elapsedTime) + " milliseconds.");
		for(int a = 0; a < 4; a++) {
			for(int b = 0; b < 4; b++) {
				dbg::logln("If I move " + stringFromDirection(a) + ", and they move " + stringFromDirection(b) + ", my resulting value will be " + std::to_string(results[a][b]));
			}
		}

		//Find minimax move.
		int miniResults[4];
		for(int a = 0; a < 4; a++) {
			miniResults[a] = *std::min_element(results[a], results[a] + 4);
		}
		sendMove(std::max_element(miniResults, miniResults + 4) - miniResults);
	}
}
